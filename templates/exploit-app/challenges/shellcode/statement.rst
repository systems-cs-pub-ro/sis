Your goal is to create shellcodes (from assembly code) and run them inside them from a C source code file. First of all enter the ``hello-shellcode/`` subfolder, inspect the source code ``vuln.c``, compile it using ``make`` and run it using ``./vuln``. Take a look at the ``shellcode`` array variable in ``vuln.c``.

   The shellcode was generated in the ``gen-hello-shellcode/`` subfolder. See the assembly source code in ``shellcode.S``, and then assembly it as a raw file in ``shellcode.bin`` using ``make``. You can disassemble the raw file by using ``objdump -D -b binary -m i386 -M intel shellcode.bin`` and see that it matches ``shellcode.S``. You can list the contents of ``shellcode.bin`` in hexadecimal by using ``make print``. That's the shellcode used in ``vuln.c``.

   a. Update the shellcode to write ``Salut, Mundi!`` to standard output, copy it in ``vuln.c``, compile and run the new file.

   b. Update the shellcode to also call ``exit(0)`` for proper exiting when running it in ``vuln.c`` (without printing *Segmentation fault*).

      Look for system call IDs in ``/usr/include/asm/unistd_32.h``. The system call ID is stored in the ``eax`` register and parameters are stored in ``ebx``, ``ecx``, ``edx``, ``esi`` and ``edi``.

      Check information on `Linux system calls`_ and `Linux system call convention`_.

.. _`Linux system calls`: https://syscalls.kernelgrok.com/
.. _`Linux system call convention`: http://cs.lmu.edu/~ray/notes/linuxsyscalls/

   c. Create a shellcode that reads and message from standard input and then prints it and exits properly. Check the `execve shellcode`_. For a better understanding of what the execve shellcode does, go through the article `Demystifying the Execve Shellcode (Stack Method)`_.

.. _`execve shellcode`: http://shell-storm.org/shellcode/files/shellcode-606.php
.. _`Demystifying the Execve Shellcode (Stack Method)`: http://hackoftheday.securitytube.net/2013/04/demystifying-execve-shellcode-stack.html

   d. Create a new shellcode that creates a shell by calling ``execve("/bin/sh", ["/bin/sh"], 0``. Add it in ``vuln.c`` and test it.

      Take inspiration from the shellcodes by `shell-storm.org`_. Take a look at `this one`_.

.. _`shell-storm.org`: http://shell-storm.org/shellcode/
.. _`this one`: http://shell-storm.org/shellcode/files/shellcode-575.php
~
~
~
~
~
~
~
~
~
~
~
